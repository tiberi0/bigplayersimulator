#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bigplayersimulator:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

require('dotenv/config');

var options = {}
// if(process.env.AMB=="PRD"){
//   options = {

//     key: fs.readFileSync('/home/tiberio/.acme.sh/bigplayersimulator.tk/bigplayersimulator.tk.key'),
   
//     cert: fs.readFileSync('/home/tiberio/.acme.sh/bigplayersimulator.tk/bigplayersimulator.tk.cer'),
   
//     ca: fs.readFileSync ('/home/tiberio/.acme.sh/bigplayersimulator.tk/ca.cer') 
//    };
// }



/**
 * Get port from environment and store in Express.
 */
 
var port = normalizePort(process.env.HTTPS || process.env.HTTP || '3000');
app.set('port', port);

/**
 * Create HTTPS server.
 */

var server = (process.env.AMB=="LOCAL")? http.createServer(app): https.createServer(options,app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
console.log("escutando "+ process.env.AMB+" na porta " + port)
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// Redirect from http port 80 to https no PRD
//var http = require('http');
// if(process.env.AMB == "PRD"){
//   http.createServer(function (req, res) {
//       res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
//       res.end();
//   }).listen(process.env.HTTP);
//   console.log('escutando HTTP na porta ' + process.env.HTTP)
// }